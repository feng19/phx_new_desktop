name: 'Release'

on:
  push:
    tags:
      - v*

permissions:
  contents: write

jobs:
  create-release:
    runs-on: ubuntu-20.04
    outputs:
      release_id: ${{ steps.create-release.outputs.result }}

    steps:
      - uses: actions/checkout@v3
      - name: create release
        id: create-release
        uses: actions/github-script@v6
        with:
          script: |
            const { data } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `app-${{ github.ref_name }}`,
              name: `Desktop App ${{ github.ref_name }}`,
              body: 'Take a look at the assets to download and install this app.',
              draft: true,
              prerelease: false
            })
            return data.id

  build-tauri:
    needs: create-release
    strategy:
      fail-fast: false
      matrix:
        platform: [ubuntu-20.04]

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v3
      - uses: erlef/setup-beam@v1
        with:
          otp-version: '26.1.1'
          elixir-version: '1.15.7'
      - name: Restore deps and _build
        uses: actions/cache@v3
        with:
          path: |
            deps
            _build
          key: ${{ runner.os }}-mix-${{ hashFiles(format('{0}{1}', github.workspace, '/mix.lock')) }}
      - name: Restore rust target
        uses: actions/cache@v3
        with:
          path: |
            src-tauri/target/release/deps
            src-tauri/target/release/build
          key: ${{ runner.os }}-cargo-${{ hashFiles(format('{0}{1}', github.workspace, '/src-tauri/Cargo.lock')) }}
      - run: mix setup
      - run: mix assets.deploy
      - run: mix release --force --overwrite
      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-20.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf
      - uses: tauri-apps/tauri-action@dev
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          releaseId: ${{ needs.create-release.outputs.release_id }}

  macos:
    needs: create-release
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v3
      - name: Restore deps and _build
        uses: actions/cache@v3
        with:
          path: |
            deps
            _build
          key: ${{ runner.os }}-mix-${{ hashFiles(format('{0}{1}', github.workspace, '/mix.lock')) }}
      - name: Restore rust target
        uses: actions/cache@v3
        with:
          path: |
            src-tauri/target/release/deps
            src-tauri/target/release/build
          key: ${{ runner.os }}-cargo-${{ hashFiles(format('{0}{1}', github.workspace, '/src-tauri/Cargo.lock')) }}
      - uses: asdf-vm/actions/install@v2
        env:
          KERL_CONFIGURE_OPTIONS: --disable-dynamic-ssl-lib
      - run: mix local.hex --force
      - run: mix local.rebar --force
      - run: mix setup
      - run: mix assets.deploy
      - run: mix release --force --overwrite
      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
      - uses: tauri-apps/tauri-action@dev
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          releaseId: ${{ needs.create-release.outputs.release_id }}

  publish-release:
    permissions:
      contents: write
    runs-on: ubuntu-20.04
    needs: [create-release, macos]

    steps:
      - name: publish release
        id: publish-release
        uses: actions/github-script@v6
        env:
          release_id: ${{ needs.create-release.outputs.release_id }}
        with:
          script: |
            github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: process.env.release_id,
              draft: false,
              prerelease: false
            })